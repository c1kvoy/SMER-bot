from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from sqlalchemy import select
from sqlalchemy import and_



from src.database import session, Diary, Users

router = Router()


class AddDiaryState(StatesGroup):
    time_period = State()
    situation = State()
    thought = State()
    emotion = State()
    reaction = State()


@router.message(Command("start"))
async def start(message: Message):
    smr_text = """
    ü§ç–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –°–ú–≠–†!üíô

    –ë–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ç—Ä–æ–º, –¥–Ω–µ–º –∏ –≤–µ—á–µ—Ä–æ–º —Å –ø–æ–º–æ—â—å—é —Å–º–∞–π–ª–∏–∫–æ–≤: üò≠üôÅüòêüôÇü§©.
    –¢–∞–∫–∂–µ –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ –°–ú–≠–†.

    ‚úçÔ∏è–ö–∞–∫ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –°–ú–≠–†?
    –° (—Å–∏—Ç—É–∞—Ü–∏—è). –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —á—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∞–∫—Ç—ã –∏ –∏–∑–±–µ–≥–∞—è –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π. 
    –ú (–º—ã—Å–ª—å). –í—Å–ø–æ–º–Ω–∏—Ç–µ, –∫–∞–∫–∏–µ –º—ã—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —É –≤–∞—Å –≤ –≥–æ–ª–æ–≤–µ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.
    –≠ (—ç–º–æ—Ü–∏—è). –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞ –Ω–∏–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞–ª–∏. 
    –† (—Ä–µ–∞–∫—Ü–∏–∏). –ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫–æ–ª–æ—Ç–∏–ª–æ—Å—å —Å–µ—Ä–¥—Ü–µ, –≤—Å–ø–æ—Ç–µ–ª–∏ —Ä—É–∫–∏) –∏–ª–∏/–∏ —Å–≤–æ—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–∫—Ä–∏—á–∞–ª, —Ö–ª–æ–ø–Ω—É–ª –¥–≤–µ—Ä—å—é).
    –î–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞-—Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—É—é –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —ç–º–æ—Ü–∏—é, –∏–ª–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –ø–æ—Å–ª–µ —ç–ø–∏–∑–æ–¥–∞ —Å –Ω–µ–π

    –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã: 

    /add - –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –°–ú–≠–† (–°–∏—Ç—É–∞—Ü–∏—è -> –ú—ã—Å–ª—å-> –≠–º–æ—Ü–∏—è -> –†–µ–∞–∫—Ü–∏—è) 
    /average - –≤—ã–≤–æ–¥–∏—Ç —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏, –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ —Å–æ–≤–µ—Ç—ã –æ—Ç LLM —Å–∏—Å—Ç–µ–º—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–≤–æ–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. 
    /export - —ç–∫—Å–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤ Excel 

    –í—Å–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤–∞–º –≤ –º–µ–Ω—é –ª–µ–≤–æ–π –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞.

    –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ!
    """
    await message.answer(
        smr_text
    )


@router.message(Command("add"))
async def start_add_entry(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£—Ç—Ä–æ")],
            [KeyboardButton(text="–î–µ–Ω—å")],
            [KeyboardButton(text="–í–µ—á–µ—Ä")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–Ω—è –¥–ª—è –∑–∞–ø–∏—Å–∏ (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä):", reply_markup=keyboard)
    await state.set_state(AddDiaryState.time_period)


@router.message(AddDiaryState.time_period)
async def chose_period(message: Message, state: FSMContext):
    if message.text not in ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π: –£—Ç—Ä–æ, –î–µ–Ω—å –∏–ª–∏ –í–µ—á–µ—Ä")
        return
    await state.update_data(time_period=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–æ—à–ª–∞", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddDiaryState.situation)


@router.message(AddDiaryState.situation)
async def chose_situation(message: Message, state: FSMContext):
    await state.update_data(situation=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –æ —á–µ–º –≤—ã –¥—É–º–∞–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
    await state.set_state(AddDiaryState.thought)


@router.message(AddDiaryState.thought)
async def chose_thought(message: Message, state: FSMContext):
    await state.update_data(thought=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —ç–º–æ—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—â—É—â–∞–ª–∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç")
    await state.set_state(AddDiaryState.emotion)


@router.message(AddDiaryState.emotion)
async def chose_emotion(message: Message, state: FSMContext):
    await state.update_data(emotion=message.text)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1.üò≠", callback_data="reaction_1")],
            [InlineKeyboardButton(text="2.üôÅ", callback_data="reaction_2")],
            [InlineKeyboardButton(text="3.üòê", callback_data="reaction_3")],
            [InlineKeyboardButton(text="4.üôÇ", callback_data="reaction_4")],
            [InlineKeyboardButton(text="5.ü§©", callback_data="reaction_5")]
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–µ–∞–∫—Ü–∏—é –æ—Ç 1 –¥–æ 5 —Å–º–∞–π–ª–∏–∫–æ–º", reply_markup=keyboard)
    await state.set_state(AddDiaryState.reaction)


@router.callback_query(lambda c: c.data.startswith("reaction_"))
async def handle_reaction(callback: CallbackQuery, state: FSMContext):
    reaction_map = {
        "reaction_1": 1,
        "reaction_2": 2,
        "reaction_3": 3,
        "reaction_4": 4,
        "reaction_5": 5
    }

    reaction = reaction_map.get(callback.data)
    if reaction is None:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    data = await state.get_data()
    data["reaction"] = reaction

    async with session() as db:
        query = select(Users).where(and_(Users.user_id == callback.from_user.id, Users.is_logged_in == True))
        result = await db.execute(query)
        user = result.scalars().first()

        if not user:
            await callback.message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            return

        diary_entry = Diary(
            login=user.login,
            user_id=callback.from_user.id,
            time_period=data["time_period"],
            situation=data["situation"],
            reaction=data["reaction"],
            thoughts=data["thought"],
            emotions=data["emotion"],
            timestamp=datetime.now(),
        )
        db.add(diary_entry)
        await db.commit()

    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å, –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫.",
        reply_markup=ReplyKeyboardRemove()
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/add")],
            [KeyboardButton(text="/average")],
            [KeyboardButton(text="/export")]
        ],
        resize_keyboard=True
    )
    await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=keyboard
    )